// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sentMessages   Message[]       @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  conversations  Conversation[]  @relation("UserConversations")
}

model Conversation {
  id          Int         @id @default(autoincrement())
  name        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  participants User[]     @relation("UserConversations")
  messages    Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  senderId       Int
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiverId     Int
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Condition {
  good
  fair
  poor
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  owner     String
  condition Condition @default(good)
}
